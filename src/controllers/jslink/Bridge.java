package controllers.jslink;

import static model.Utils.msg;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.HashMap;
import java.util.Optional;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.sun.javafx.application.PlatformImpl;
import com.sun.javafx.webkit.WebConsoleListener;

import javafx.scene.web.WebView;
import javafx.stage.FileChooser;
import model.Program;
import model.Utils;
import model.Utils.Level;
import model.vars.ConstantVar;
import view.component.Popup;
import view.component.PopupParams;
import view.main.App;
import view.main.WatchPanel;

/**
 * Bridge between javascript and java, allows to call java code from the
 * javascript code
 * @author Daphnis
 */
public class Bridge {

	/**
	 * Application UI
	 */
	private App app;

	/**
	 * Program that will be used when running the code
	 */
	private Program program;

	/**
	 * Panel to follow variables state
	 */
	private WatchPanel watchpanel;

	/**
	 * Construct a new bridge with the specified program
	 * @param program Program which will be used in execution
	 * @param app Application UI
	 * @param watchPanel panel to watch variables
	 */
	public Bridge(Program program, App app, WatchPanel watchPanel) {
		super();
		this.app = app;
		this.program = program;
		this.program.setBridge(this);
		this.watchpanel = watchPanel;
		WebConsoleListener.setDefaultListener(new WebConsoleListener() {

			@Override
			public void messageAdded(WebView arg0, String arg1, int arg2, String arg3) {
				Utils.printLog(Level.LOG, arg3 + " " + arg2 + "\t" + arg1);
			}
		});
	}

	/**
	 * Execute a simple line of code
	 * @param code the line to execute
	 */
	public void exec(String code) {
		this.program.executeLine(code);
	}

	/**
	 * Change the default language
	 * @param lang the new language
	 */
	public void changeLanguage(String lang) {
		Utils.changeLanguage(lang);
		watchpanel.refresh();
		app.loadDoc();
	}

	/**
	 * The code that is going to be executed when the javascript calls the execute
	 * method on the controller bridge. Analyze the code that has been created in
	 * the webview and runs it
	 * @param code the pseudo-code generated by the AlgoTouch Generator
	 * @param macro Macro used in the code
	 */
	public void execute(String code, String macro) {
		compile(code);
		if (macro != null)
			program.run(macro);
		else
			program.run();
		watchpanel.refresh();
	}

	/**
	 * Highlight a part of a designed macro
	 * @param macro Macro selected to highlight a part
	 * @param part Part of the macro to highlight
	 * @param async Set task unsynchronized or not
	 */
	public void highlight(String macro, String part, boolean async) {
		try {
			Runnable task = () -> app.getMainEngine().executeScript("highlight('" + macro + "', '" + part + "');");
			if (async)
				PlatformImpl.runLater(task);
			else
				PlatformImpl.runAndWait(task);
		} catch (Exception e) {
			Utils.printLog(Level.ERROR, "Error was throwned during step by step execution see logs for more informations");
			Utils.writeException(e);
		}
	}

	/**
	 * Compile the code to execute
	 * 
	 * @param code
	 *            The code to compile
	 */
	public void compile(String code) {
		program.analyse(code);
	}

	/**
	 * Forward isRunning event to program and return result
	 * @return True if program is running
	 */
	public boolean isRunning() {
		return program.isRunning();
	}

	/**
	 * Set execution in normal mode
	 */
	public void normal() {
		highlight(null, null, false);
		program.interrupt();
		program.setStep(false);
		program.setDeep(false);
		program.setTimeout(0);
	}

	/**
	 * Set execution in step by step
	 * @param deep If true set execution in deep mode
	 */
	public void steping(Boolean deep) {
		program.setDeep(Optional.ofNullable(deep).orElse(false));
		if (!program.isAuto()) {
			program.setStep(true);
			program.setTimeout(0);
			program.runNextStep();
		}

	}

	/**
	 * Set execution in auto step by step mode
	 * @param time Time for one step
	 */
	public void autoStep(String time) {
		if (!program.isAuto()) {
			program.interrupt();
			program.setStep(true);
		}
		program.setTimeout(Integer.parseInt(Optional.ofNullable(time).orElse("750")));
	}

	/**
	 * Save the workspace blocks in a file
	 * @param blocks XML string generated by blockly for blocks
	 * @param vars Stringified variables
	 */
	public void save(String blocks, String vars) {

		File choosed = Utils.chooseFile("algy");
		if (choosed != null) {

			HashMap<String, Integer[]> namedArrays = new HashMap<>();

			program.getAllArrays().forEach(a -> namedArrays.put(a.getName(),
					IntStream.range(0, a.getSize()).map(a::getValue).boxed().toArray(Integer[]::new)));

			HashMap<String, Integer> namedVars = new HashMap<>();

			program.getAllVariables().stream().filter(v -> v instanceof ConstantVar)
					.forEach(v -> namedVars.put(v.getName(), v.getValue()));

			DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
			try {
				DocumentBuilder builder = fact.newDocumentBuilder();

				Document document = builder.newDocument();
				Element rootElement = document.createElement("saved");
				Node blocksElement = document.createElement("blocks");
				Node variablesElement = document.createElement("variables");
				Node arraysElement = document.createElement("arrays");
				Node constantsElement = document.createElement("constants");

				blocksElement.setTextContent(blocks);
				variablesElement.setTextContent(vars);
				arraysElement.setTextContent(Utils.asString(namedArrays));
				constantsElement.setTextContent(Utils.asString(namedVars));

				document.appendChild(rootElement);
				rootElement.appendChild(blocksElement);
				rootElement.appendChild(variablesElement);
				rootElement.appendChild(arraysElement);
				rootElement.appendChild(constantsElement);

				TransformerFactory factory = TransformerFactory.newInstance();
				Transformer transformer = factory.newTransformer();
				DOMSource source = new DOMSource(document);
				StreamResult result = new StreamResult(Files.newOutputStream(choosed.toPath(), StandardOpenOption.WRITE,
						StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE));
				transformer.transform(source, result);
				
				Utils.printLog(Level.LOG, "Saved in file : \"" + choosed.getAbsolutePath() + "\"");
				app.setTitle("ALGY - " + choosed.getName());

			} catch (IOException | ParserConfigurationException | TransformerException e) {
				Utils.writeException(e);
				Utils.printLog(Level.ERROR, "Error occured during program saving see logs file for more informations");
			}

		}

	}

	/**
	 * Load a program from a file
	 * @return Loaded program
	 */
	public String[] load() {
		String[] res = null;
		FileChooser dialog = new FileChooser();
		dialog.setTitle(msg("Bridge.load"));
		dialog.getExtensionFilters().add(new FileChooser.ExtensionFilter("ALGY", "*.algy"));
		File fileAlgo = Stream.of(new File("./algos")).peek(File::mkdirs).findFirst().get();
		dialog.setInitialDirectory(fileAlgo);
		File selected = dialog.showOpenDialog(null);
		if (selected != null)
			try {
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				DocumentBuilder builder = factory.newDocumentBuilder();
				Document document = builder.parse(selected);
				Element elem = document.getDocumentElement();
				NodeList list = elem.getChildNodes();

				Element blockNode = (Element) list.item(0);
				Element varNode = (Element) list.item(1);
				String blocks = blockNode.getTextContent();
				String vars = varNode.getTextContent();

				res = new String[] { blocks, vars };

				Optional.ofNullable(list.item(2))
						.ifPresent(n -> Optional.ofNullable(Utils.<HashMap<String, Integer[]>>from(n.getTextContent()))
								.ifPresent(v -> v.forEach(program::putTempArray)));
				Optional.ofNullable(list.item(3))
						.ifPresent(n -> Optional
								.ofNullable(Utils.<HashMap<String, Integer>>from(list.item(3).getTextContent()))
								.ifPresent(v -> v.forEach(program::putTempConstant)));
				Utils.printLog(Level.LOG, "\"" + selected + "\" has been loaded");
				app.setTitle("ALGY - " + selected.getName());
			} catch (IOException e) {
				Utils.printLog(Level.ERROR, "Error occured during program loading see logs file for more informations");
				Utils.writeException(e);
			} catch (Exception e) {
				res = null;
				Utils.printLog(Level.ERROR, "Error : file corrupted");
				Utils.writeException(e);
				Popup.showMessagePopup(msg("Popup.error"), msg("Program.corrupted"));
			}
		return res;
	}

	/**
	 * Export program to text
	 * @param code Code to analyze
	 */
	public void exportTxt(String code) {
		Utils.save(Utils.exportToText(code), "txt");
	}

	public void openParams() {
		program.setPause(true);
		Object[] data = PopupParams.showPopupParams();
		if(data != null) {
			if ((Boolean) data[0]) {
				program.setStep(false);
				program.setDeep(false);
				program.setTimeout(0);
				program.runNextStep();
				highlight(null, null, false);
			} else {
				if((Boolean)data[2]) {
					program.setTimeout((Integer)data[3]);
					program.runNextStep();
				}
				else program.setTimeout(0);
				program.setDeep((Boolean)data[1]);
				app.getMainEngine().executeScript("step(" + !(Boolean)data[2] + ", " + (Boolean)data[1] + ")");
				program.setStep(true);
			}
			Utils.printLog(Level.LOG, "Execution parameters : STEP[" + !(Boolean)data[0] + "]\tDEEP[" + (Boolean)data[1] + "]\tAUTO[" + (Boolean)data[2] + "]\tTIMEOUT[" + (Integer)data[3] + "]");
			
		}
		program.setPause(false);
	}
	
	public void setMovable(boolean movable) {
		PlatformImpl.runLater(() -> app.getMainEngine().executeScript("setMovable(" + movable + ")"));
		
	}

}
